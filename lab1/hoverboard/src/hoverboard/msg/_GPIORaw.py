"""autogenerated by genpy from hoverboard/GPIORaw.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GPIORaw(genpy.Message):
  _md5sum = "69e3b5824711a9cb06bff3f258b81857"
  _type = "hoverboard/GPIORaw"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# GPIO values for the 3.3V processor.  -1 indicates that
# It has not been read, 0 if it is at a logic low level and
# 1 for a logic high level
int8 gpio33_0
int8 gpio33_1
int8 gpio33_2
int8 gpio33_3
int8 gpio33_4
int8 gpio33_5

# GPIO values for the 5.0V processor.  -1 indicates that
# It has not been read, 0 if it is at a logic low level and
# 1 for a logic high level
int8 gpio5_0
int8 gpio5_1
int8 gpio5_2
int8 gpio5_3
int8 gpio5_4
int8 gpio5_5
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','gpio33_0','gpio33_1','gpio33_2','gpio33_3','gpio33_4','gpio33_5','gpio5_0','gpio5_1','gpio5_2','gpio5_3','gpio5_4','gpio5_5']
  _slot_types = ['std_msgs/Header','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,gpio33_0,gpio33_1,gpio33_2,gpio33_3,gpio33_4,gpio33_5,gpio5_0,gpio5_1,gpio5_2,gpio5_3,gpio5_4,gpio5_5

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPIORaw, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.gpio33_0 is None:
        self.gpio33_0 = 0
      if self.gpio33_1 is None:
        self.gpio33_1 = 0
      if self.gpio33_2 is None:
        self.gpio33_2 = 0
      if self.gpio33_3 is None:
        self.gpio33_3 = 0
      if self.gpio33_4 is None:
        self.gpio33_4 = 0
      if self.gpio33_5 is None:
        self.gpio33_5 = 0
      if self.gpio5_0 is None:
        self.gpio5_0 = 0
      if self.gpio5_1 is None:
        self.gpio5_1 = 0
      if self.gpio5_2 is None:
        self.gpio5_2 = 0
      if self.gpio5_3 is None:
        self.gpio5_3 = 0
      if self.gpio5_4 is None:
        self.gpio5_4 = 0
      if self.gpio5_5 is None:
        self.gpio5_5 = 0
    else:
      self.header = std_msgs.msg.Header()
      self.gpio33_0 = 0
      self.gpio33_1 = 0
      self.gpio33_2 = 0
      self.gpio33_3 = 0
      self.gpio33_4 = 0
      self.gpio33_5 = 0
      self.gpio5_0 = 0
      self.gpio5_1 = 0
      self.gpio5_2 = 0
      self.gpio5_3 = 0
      self.gpio5_4 = 0
      self.gpio5_5 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_12b.pack(_x.gpio33_0, _x.gpio33_1, _x.gpio33_2, _x.gpio33_3, _x.gpio33_4, _x.gpio33_5, _x.gpio5_0, _x.gpio5_1, _x.gpio5_2, _x.gpio5_3, _x.gpio5_4, _x.gpio5_5))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.gpio33_0, _x.gpio33_1, _x.gpio33_2, _x.gpio33_3, _x.gpio33_4, _x.gpio33_5, _x.gpio5_0, _x.gpio5_1, _x.gpio5_2, _x.gpio5_3, _x.gpio5_4, _x.gpio5_5,) = _struct_12b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_12b.pack(_x.gpio33_0, _x.gpio33_1, _x.gpio33_2, _x.gpio33_3, _x.gpio33_4, _x.gpio33_5, _x.gpio5_0, _x.gpio5_1, _x.gpio5_2, _x.gpio5_3, _x.gpio5_4, _x.gpio5_5))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.gpio33_0, _x.gpio33_1, _x.gpio33_2, _x.gpio33_3, _x.gpio33_4, _x.gpio33_5, _x.gpio5_0, _x.gpio5_1, _x.gpio5_2, _x.gpio5_3, _x.gpio5_4, _x.gpio5_5,) = _struct_12b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_12b = struct.Struct("<12b")
