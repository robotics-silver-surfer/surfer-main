"""autogenerated by genpy from Ref/BotStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import Ref.msg
import std_msgs.msg

class BotStatus(genpy.Message):
  _md5sum = "742eab62fbe4b8a5d8451d3c2f43cb20"
  _type = "Ref/BotStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
uint8 botID
Position currentPosition
Position nextCheckpoint
uint8 checkpointIndex
uint8 lap
uint8 powerUp
uint8 shotCount
bool canRun

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: Ref/Position
float32 x
float32 y
float32 rot

"""
  __slots__ = ['header','botID','currentPosition','nextCheckpoint','checkpointIndex','lap','powerUp','shotCount','canRun']
  _slot_types = ['std_msgs/Header','uint8','Ref/Position','Ref/Position','uint8','uint8','uint8','uint8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,botID,currentPosition,nextCheckpoint,checkpointIndex,lap,powerUp,shotCount,canRun

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BotStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.botID is None:
        self.botID = 0
      if self.currentPosition is None:
        self.currentPosition = Ref.msg.Position()
      if self.nextCheckpoint is None:
        self.nextCheckpoint = Ref.msg.Position()
      if self.checkpointIndex is None:
        self.checkpointIndex = 0
      if self.lap is None:
        self.lap = 0
      if self.powerUp is None:
        self.powerUp = 0
      if self.shotCount is None:
        self.shotCount = 0
      if self.canRun is None:
        self.canRun = False
    else:
      self.header = std_msgs.msg.Header()
      self.botID = 0
      self.currentPosition = Ref.msg.Position()
      self.nextCheckpoint = Ref.msg.Position()
      self.checkpointIndex = 0
      self.lap = 0
      self.powerUp = 0
      self.shotCount = 0
      self.canRun = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B6f5B.pack(_x.botID, _x.currentPosition.x, _x.currentPosition.y, _x.currentPosition.rot, _x.nextCheckpoint.x, _x.nextCheckpoint.y, _x.nextCheckpoint.rot, _x.checkpointIndex, _x.lap, _x.powerUp, _x.shotCount, _x.canRun))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.currentPosition is None:
        self.currentPosition = Ref.msg.Position()
      if self.nextCheckpoint is None:
        self.nextCheckpoint = Ref.msg.Position()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.botID, _x.currentPosition.x, _x.currentPosition.y, _x.currentPosition.rot, _x.nextCheckpoint.x, _x.nextCheckpoint.y, _x.nextCheckpoint.rot, _x.checkpointIndex, _x.lap, _x.powerUp, _x.shotCount, _x.canRun,) = _struct_B6f5B.unpack(str[start:end])
      self.canRun = bool(self.canRun)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B6f5B.pack(_x.botID, _x.currentPosition.x, _x.currentPosition.y, _x.currentPosition.rot, _x.nextCheckpoint.x, _x.nextCheckpoint.y, _x.nextCheckpoint.rot, _x.checkpointIndex, _x.lap, _x.powerUp, _x.shotCount, _x.canRun))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.currentPosition is None:
        self.currentPosition = Ref.msg.Position()
      if self.nextCheckpoint is None:
        self.nextCheckpoint = Ref.msg.Position()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.botID, _x.currentPosition.x, _x.currentPosition.y, _x.currentPosition.rot, _x.nextCheckpoint.x, _x.nextCheckpoint.y, _x.nextCheckpoint.rot, _x.checkpointIndex, _x.lap, _x.powerUp, _x.shotCount, _x.canRun,) = _struct_B6f5B.unpack(str[start:end])
      self.canRun = bool(self.canRun)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_B6f5B = struct.Struct("<B6f5B")
