/* Auto-generated by genmsg_cpp for file /home/mkaatrtgheesw/groovy_workspace/sandbox/Ref/msg/BotStatus.msg */
#ifndef REF_MESSAGE_BOTSTATUS_H
#define REF_MESSAGE_BOTSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "Ref/Position.h"
#include "Ref/Position.h"

namespace Ref
{
template <class ContainerAllocator>
struct BotStatus_ {
  typedef BotStatus_<ContainerAllocator> Type;

  BotStatus_()
  : header()
  , botID(0)
  , currentPosition()
  , nextCheckpoint()
  , checkpointIndex(0)
  , powerUp(0)
  , shotCount(0)
  , canRun(false)
  {
  }

  BotStatus_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , botID(0)
  , currentPosition(_alloc)
  , nextCheckpoint(_alloc)
  , checkpointIndex(0)
  , powerUp(0)
  , shotCount(0)
  , canRun(false)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _botID_type;
  uint8_t botID;

  typedef  ::Ref::Position_<ContainerAllocator>  _currentPosition_type;
   ::Ref::Position_<ContainerAllocator>  currentPosition;

  typedef  ::Ref::Position_<ContainerAllocator>  _nextCheckpoint_type;
   ::Ref::Position_<ContainerAllocator>  nextCheckpoint;

  typedef uint8_t _checkpointIndex_type;
  uint8_t checkpointIndex;

  typedef uint8_t _powerUp_type;
  uint8_t powerUp;

  typedef uint8_t _shotCount_type;
  uint8_t shotCount;

  typedef uint8_t _canRun_type;
  uint8_t canRun;


  typedef boost::shared_ptr< ::Ref::BotStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Ref::BotStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BotStatus
typedef  ::Ref::BotStatus_<std::allocator<void> > BotStatus;

typedef boost::shared_ptr< ::Ref::BotStatus> BotStatusPtr;
typedef boost::shared_ptr< ::Ref::BotStatus const> BotStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Ref::BotStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Ref::BotStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Ref

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Ref::BotStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Ref::BotStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Ref::BotStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4b53b92ad7f6183c53c24c84532c8fc7";
  }

  static const char* value(const  ::Ref::BotStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4b53b92ad7f6183cULL;
  static const uint64_t static_value2 = 0x53c24c84532c8fc7ULL;
};

template<class ContainerAllocator>
struct DataType< ::Ref::BotStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Ref/BotStatus";
  }

  static const char* value(const  ::Ref::BotStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Ref::BotStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
uint8 botID\n\
Position currentPosition\n\
Position nextCheckpoint\n\
uint8 checkpointIndex\n\
uint8 powerUp\n\
uint8 shotCount\n\
bool canRun\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: Ref/Position\n\
Header header\n\
int32 x\n\
int32 y\n\
int32 rot\n\
\n\
";
  }

  static const char* value(const  ::Ref::BotStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::Ref::BotStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::Ref::BotStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Ref::BotStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.botID);
    stream.next(m.currentPosition);
    stream.next(m.nextCheckpoint);
    stream.next(m.checkpointIndex);
    stream.next(m.powerUp);
    stream.next(m.shotCount);
    stream.next(m.canRun);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BotStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Ref::BotStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Ref::BotStatus_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "botID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.botID);
    s << indent << "currentPosition: ";
s << std::endl;
    Printer< ::Ref::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.currentPosition);
    s << indent << "nextCheckpoint: ";
s << std::endl;
    Printer< ::Ref::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.nextCheckpoint);
    s << indent << "checkpointIndex: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checkpointIndex);
    s << indent << "powerUp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.powerUp);
    s << indent << "shotCount: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shotCount);
    s << indent << "canRun: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canRun);
  }
};


} // namespace message_operations
} // namespace ros

#endif // REF_MESSAGE_BOTSTATUS_H

