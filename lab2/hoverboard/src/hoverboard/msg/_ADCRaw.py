"""autogenerated by genpy from hoverboard/ADCRaw.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ADCRaw(genpy.Message):
  _md5sum = "f5368e6fbeebc50a59ba28f656dd3599"
  _type = "hoverboard/ADCRaw"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

#All of the adc values for the 5V processor on the hoverboard.  The
#values are in mV, with -1 indicating this value was not
#received/populated.

int32 adc5_0
int32 adc5_1
int32 adc5_2
int32 adc5_3
int32 adc5_4
int32 adc5_5
int32 adc5_6
int32 adc5_7

#All of the adc values for the 3.3V processor on the hoverboard.  The
#values are in mV, with -1 indicating this value was not
#received/populated.

int32 adc33_0
int32 adc33_1
int32 adc33_2
int32 adc33_3
int32 adc33_4
int32 adc33_5



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','adc5_0','adc5_1','adc5_2','adc5_3','adc5_4','adc5_5','adc5_6','adc5_7','adc33_0','adc33_1','adc33_2','adc33_3','adc33_4','adc33_5']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,adc5_0,adc5_1,adc5_2,adc5_3,adc5_4,adc5_5,adc5_6,adc5_7,adc33_0,adc33_1,adc33_2,adc33_3,adc33_4,adc33_5

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ADCRaw, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.adc5_0 is None:
        self.adc5_0 = 0
      if self.adc5_1 is None:
        self.adc5_1 = 0
      if self.adc5_2 is None:
        self.adc5_2 = 0
      if self.adc5_3 is None:
        self.adc5_3 = 0
      if self.adc5_4 is None:
        self.adc5_4 = 0
      if self.adc5_5 is None:
        self.adc5_5 = 0
      if self.adc5_6 is None:
        self.adc5_6 = 0
      if self.adc5_7 is None:
        self.adc5_7 = 0
      if self.adc33_0 is None:
        self.adc33_0 = 0
      if self.adc33_1 is None:
        self.adc33_1 = 0
      if self.adc33_2 is None:
        self.adc33_2 = 0
      if self.adc33_3 is None:
        self.adc33_3 = 0
      if self.adc33_4 is None:
        self.adc33_4 = 0
      if self.adc33_5 is None:
        self.adc33_5 = 0
    else:
      self.header = std_msgs.msg.Header()
      self.adc5_0 = 0
      self.adc5_1 = 0
      self.adc5_2 = 0
      self.adc5_3 = 0
      self.adc5_4 = 0
      self.adc5_5 = 0
      self.adc5_6 = 0
      self.adc5_7 = 0
      self.adc33_0 = 0
      self.adc33_1 = 0
      self.adc33_2 = 0
      self.adc33_3 = 0
      self.adc33_4 = 0
      self.adc33_5 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_14i.pack(_x.adc5_0, _x.adc5_1, _x.adc5_2, _x.adc5_3, _x.adc5_4, _x.adc5_5, _x.adc5_6, _x.adc5_7, _x.adc33_0, _x.adc33_1, _x.adc33_2, _x.adc33_3, _x.adc33_4, _x.adc33_5))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.adc5_0, _x.adc5_1, _x.adc5_2, _x.adc5_3, _x.adc5_4, _x.adc5_5, _x.adc5_6, _x.adc5_7, _x.adc33_0, _x.adc33_1, _x.adc33_2, _x.adc33_3, _x.adc33_4, _x.adc33_5,) = _struct_14i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_14i.pack(_x.adc5_0, _x.adc5_1, _x.adc5_2, _x.adc5_3, _x.adc5_4, _x.adc5_5, _x.adc5_6, _x.adc5_7, _x.adc33_0, _x.adc33_1, _x.adc33_2, _x.adc33_3, _x.adc33_4, _x.adc33_5))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.adc5_0, _x.adc5_1, _x.adc5_2, _x.adc5_3, _x.adc5_4, _x.adc5_5, _x.adc5_6, _x.adc5_7, _x.adc33_0, _x.adc33_1, _x.adc33_2, _x.adc33_3, _x.adc33_4, _x.adc33_5,) = _struct_14i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_14i = struct.Struct("<14i")
