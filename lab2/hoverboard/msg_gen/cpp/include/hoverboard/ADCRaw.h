/* Auto-generated by genmsg_cpp for file /home/courtney/groovy_ws/projects/ros/surfer-main/lab2/hoverboard/msg/ADCRaw.msg */
#ifndef HOVERBOARD_MESSAGE_ADCRAW_H
#define HOVERBOARD_MESSAGE_ADCRAW_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace hoverboard
{
template <class ContainerAllocator>
struct ADCRaw_ {
  typedef ADCRaw_<ContainerAllocator> Type;

  ADCRaw_()
  : header()
  , adc5_0(0)
  , adc5_1(0)
  , adc5_2(0)
  , adc5_3(0)
  , adc5_4(0)
  , adc5_5(0)
  , adc5_6(0)
  , adc5_7(0)
  , adc33_0(0)
  , adc33_1(0)
  , adc33_2(0)
  , adc33_3(0)
  , adc33_4(0)
  , adc33_5(0)
  {
  }

  ADCRaw_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , adc5_0(0)
  , adc5_1(0)
  , adc5_2(0)
  , adc5_3(0)
  , adc5_4(0)
  , adc5_5(0)
  , adc5_6(0)
  , adc5_7(0)
  , adc33_0(0)
  , adc33_1(0)
  , adc33_2(0)
  , adc33_3(0)
  , adc33_4(0)
  , adc33_5(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _adc5_0_type;
  int32_t adc5_0;

  typedef int32_t _adc5_1_type;
  int32_t adc5_1;

  typedef int32_t _adc5_2_type;
  int32_t adc5_2;

  typedef int32_t _adc5_3_type;
  int32_t adc5_3;

  typedef int32_t _adc5_4_type;
  int32_t adc5_4;

  typedef int32_t _adc5_5_type;
  int32_t adc5_5;

  typedef int32_t _adc5_6_type;
  int32_t adc5_6;

  typedef int32_t _adc5_7_type;
  int32_t adc5_7;

  typedef int32_t _adc33_0_type;
  int32_t adc33_0;

  typedef int32_t _adc33_1_type;
  int32_t adc33_1;

  typedef int32_t _adc33_2_type;
  int32_t adc33_2;

  typedef int32_t _adc33_3_type;
  int32_t adc33_3;

  typedef int32_t _adc33_4_type;
  int32_t adc33_4;

  typedef int32_t _adc33_5_type;
  int32_t adc33_5;


  typedef boost::shared_ptr< ::hoverboard::ADCRaw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hoverboard::ADCRaw_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ADCRaw
typedef  ::hoverboard::ADCRaw_<std::allocator<void> > ADCRaw;

typedef boost::shared_ptr< ::hoverboard::ADCRaw> ADCRawPtr;
typedef boost::shared_ptr< ::hoverboard::ADCRaw const> ADCRawConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hoverboard::ADCRaw_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hoverboard::ADCRaw_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hoverboard

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hoverboard::ADCRaw_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hoverboard::ADCRaw_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hoverboard::ADCRaw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f5368e6fbeebc50a59ba28f656dd3599";
  }

  static const char* value(const  ::hoverboard::ADCRaw_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf5368e6fbeebc50aULL;
  static const uint64_t static_value2 = 0x59ba28f656dd3599ULL;
};

template<class ContainerAllocator>
struct DataType< ::hoverboard::ADCRaw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hoverboard/ADCRaw";
  }

  static const char* value(const  ::hoverboard::ADCRaw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hoverboard::ADCRaw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
#All of the adc values for the 5V processor on the hoverboard.  The\n\
#values are in mV, with -1 indicating this value was not\n\
#received/populated.\n\
\n\
int32 adc5_0\n\
int32 adc5_1\n\
int32 adc5_2\n\
int32 adc5_3\n\
int32 adc5_4\n\
int32 adc5_5\n\
int32 adc5_6\n\
int32 adc5_7\n\
\n\
#All of the adc values for the 3.3V processor on the hoverboard.  The\n\
#values are in mV, with -1 indicating this value was not\n\
#received/populated.\n\
\n\
int32 adc33_0\n\
int32 adc33_1\n\
int32 adc33_2\n\
int32 adc33_3\n\
int32 adc33_4\n\
int32 adc33_5\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::hoverboard::ADCRaw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::hoverboard::ADCRaw_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::hoverboard::ADCRaw_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hoverboard::ADCRaw_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.adc5_0);
    stream.next(m.adc5_1);
    stream.next(m.adc5_2);
    stream.next(m.adc5_3);
    stream.next(m.adc5_4);
    stream.next(m.adc5_5);
    stream.next(m.adc5_6);
    stream.next(m.adc5_7);
    stream.next(m.adc33_0);
    stream.next(m.adc33_1);
    stream.next(m.adc33_2);
    stream.next(m.adc33_3);
    stream.next(m.adc33_4);
    stream.next(m.adc33_5);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ADCRaw_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hoverboard::ADCRaw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hoverboard::ADCRaw_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "adc5_0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc5_0);
    s << indent << "adc5_1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc5_1);
    s << indent << "adc5_2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc5_2);
    s << indent << "adc5_3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc5_3);
    s << indent << "adc5_4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc5_4);
    s << indent << "adc5_5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc5_5);
    s << indent << "adc5_6: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc5_6);
    s << indent << "adc5_7: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc5_7);
    s << indent << "adc33_0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc33_0);
    s << indent << "adc33_1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc33_1);
    s << indent << "adc33_2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc33_2);
    s << indent << "adc33_3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc33_3);
    s << indent << "adc33_4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc33_4);
    s << indent << "adc33_5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc33_5);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HOVERBOARD_MESSAGE_ADCRAW_H

