/* Auto-generated by genmsg_cpp for file /projects/ros/surfer-main/lab2/hoverboard/msg/PWMRaw.msg */
#ifndef HOVERBOARD_MESSAGE_PWMRAW_H
#define HOVERBOARD_MESSAGE_PWMRAW_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace hoverboard
{
template <class ContainerAllocator>
struct PWMRaw_ {
  typedef PWMRaw_<ContainerAllocator> Type;

  PWMRaw_()
  : header()
  , channel(0)
  , pwm(0)
  {
  }

  PWMRaw_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , channel(0)
  , pwm(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int8_t _channel_type;
  int8_t channel;

  typedef int32_t _pwm_type;
  int32_t pwm;


  typedef boost::shared_ptr< ::hoverboard::PWMRaw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hoverboard::PWMRaw_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PWMRaw
typedef  ::hoverboard::PWMRaw_<std::allocator<void> > PWMRaw;

typedef boost::shared_ptr< ::hoverboard::PWMRaw> PWMRawPtr;
typedef boost::shared_ptr< ::hoverboard::PWMRaw const> PWMRawConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hoverboard::PWMRaw_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hoverboard::PWMRaw_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hoverboard

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hoverboard::PWMRaw_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hoverboard::PWMRaw_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hoverboard::PWMRaw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e11724542b6627b3863c96bbe05f93e";
  }

  static const char* value(const  ::hoverboard::PWMRaw_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1e11724542b6627bULL;
  static const uint64_t static_value2 = 0x3863c96bbe05f93eULL;
};

template<class ContainerAllocator>
struct DataType< ::hoverboard::PWMRaw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hoverboard/PWMRaw";
  }

  static const char* value(const  ::hoverboard::PWMRaw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hoverboard::PWMRaw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
# The pwm channel to set (0-5)\n\
int8 channel\n\
\n\
# PWM value setting from 0 to 100 (inclusive), negative value sets\n\
# state to high-z (no output).\n\
int32 pwm\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::hoverboard::PWMRaw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::hoverboard::PWMRaw_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::hoverboard::PWMRaw_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hoverboard::PWMRaw_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.channel);
    stream.next(m.pwm);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PWMRaw_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hoverboard::PWMRaw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hoverboard::PWMRaw_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "channel: ";
    Printer<int8_t>::stream(s, indent + "  ", v.channel);
    s << indent << "pwm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pwm);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HOVERBOARD_MESSAGE_PWMRAW_H

